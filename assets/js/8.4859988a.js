(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{169:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),a("p",[t._v("Nevertheless, you can change the get/set behaviour as you please!")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),a("p",[t._v("Let's notify the user each time the primary Pokémon was changed:")]),t._v(" "),t._m(12),t._m(13),t._v(" "),a("p",[t._v("As you can see "),a("strong",[t._v("you need to manually commit a mutation")]),t._v(". All these mutations are also already created by Vuex Easy Access for you. Please review the correct mutation syntax down below or check the "),a("router-link",{attrs:{to:"./reference.html"}},[t._v("overview")]),t._v(".")],1),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),a("p",[t._v("And the underlying mutations it will use:")]),t._v(" "),t._m(19),a("p",[t._v("You can choose your preferred pattern like this:")]),t._v(" "),t._m(20),a("p",[t._v("(Do not use conflicting choices in the plugin settings and the defaultMutations)")]),t._v(" "),t._m(21),t._v(" "),a("p",[t._v("In cases you want to sync your Vuex store automatically with Firebase's Firestore see "),a("router-link",{attrs:{to:"./advanced.html#firestore-integration-for-google-firebase"}},[t._v("Firestore integration (for Google Firebase)")]),t._v(".")],1)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"hooks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hooks","aria-hidden":"true"}},[this._v("#")]),this._v(" Hooks")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"warning"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#warning","aria-hidden":"true"}},[this._v("#")]),this._v(" Warning")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"danger custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("Please note that it is not recommended to use too much hooks in big applications.")]),this._v(" "),s("div",{staticStyle:{"margin-bottom":"1.5em"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("If you want to add additional functionality to certain getters/setters "),s("strong",[this._v("it is better to create a getters/mutation/action manually with a specific name.")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("The reason is that setting up a hook into the regular "),s("code",[this._v("get()")]),this._v(" or "),s("code",[this._v("set()")]),this._v(" of Vuex Easy Access is done on the Vuex-module side, and thus "),s("strong",[this._v("not clear from just looking at a Vue component")]),this._v("! So it's easy to forget and might put you in situations where you expected different behaviour.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"hook-into-get"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hook-into-get","aria-hidden":"true"}},[this._v("#")]),this._v(" Hook into get()")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Say that we want to make the first letter of our primary Pokémon always show up with a capital letter. For this we can overwrite the default "),s("code",[this._v("get('character/party.primary')")]),this._v(" getter like so:")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// Module: `character/`")]),t._v("\nstate"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" party"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" primary"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'mewtwo'")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\ngetters"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// create a getter with the prop name you want to overwrite:")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'party.primary'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" state"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("party"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("primary\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// capitalise first letter:")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("toUpperCase")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("substring")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Now automatically in your whole app where you used "),s("code",[this._v("get('character/party.primary')")]),this._v(" it will return the Pokémon name with a first capital letter!")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("The "),s("code",[this._v("get()")]),this._v(" method of Vuex Easy Access first checks if a getter with the syntax like above exists. If it does it will return the getter, if not it will just return the state property: "),s("code",[this._v("state.character.party.primary")]),this._v(".")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"hook-into-set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hook-into-set","aria-hidden":"true"}},[this._v("#")]),this._v(" Hook into set()")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Say we want a side effect to our setter. Instead of creating a new setter and changing all our Vue components, we can easily overwrite the default "),s("code",[this._v("set()")]),this._v(" action to do extra stuff.")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// Module: `character/`")]),t._v("\nactions"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// create an action with the prop name you want to overwrite:")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'party.primary'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("commit"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dispatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newPokemon"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("dispatch")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'notify'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Primary Pokémon changed!'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// do not forget to commit manually when overwriting the setter:")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("commit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'party.primary'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newPokemon"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("The "),s("code",[this._v("set()")]),this._v(" method of Vuex Easy Access checks to see if an action with the same path exist. If it exists it will dispatch this action, if not it will just make a default mutation: "),s("code",[this._v("commit('character/party.primary', newPokemon)")]),this._v(".")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"syntax-for-overwriting-setters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#syntax-for-overwriting-setters","aria-hidden":"true"}},[this._v("#")]),this._v(" Syntax for overwriting setters")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("You can choose two setups for mutation/setter syntax: "),s("code",[this._v("simple")]),this._v(" (default) or "),s("code",[this._v("traditional")]),this._v(". This will affect how you make commits or overwrite them!")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Let's take this example state: "),s("br"),s("code",[this._v("pokemonBox: { water: [] }")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("When you want to "),s("strong",[this._v("overwrite the setter actions")]),this._v(":")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 'simple' uses just the property name:")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'pokemonBox.water'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("commit"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// do something extra")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("commit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'pokemonBox.water'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// you have to commit when overwriting")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 'traditional' uses 'set' in front of actions and 'SET_' in front of mutations:")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'setPokemonBox.water'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("commit"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// do something extra")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("commit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'SET_POKEMONBOX.WATER'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// you have to commit when overwriting")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 'simple' (default):")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("commit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'pokemonBox'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("commit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'pokemonBox.water'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("commit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'pokemonBox.water.push'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("commit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'pokemonBox.water.pop'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("commit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'pokemonBox.water.shift'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("commit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'pokemonBox.water.splice'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 'traditional':")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("commit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'SET_POKEMONBOX'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("commit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'SET_POKEMONBOX.WATER'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("commit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'PUSH_POKEMONBOX.WATER'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("commit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'POP_POKEMONBOX.WATER'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("commit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'SHIFT_POKEMONBOX.WATER'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("commit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'SPLICE_POKEMONBOX.WATER'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" easyAccess "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("createEasyAccess")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  pattern"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'traditional'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// or 'simple'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// and in your modules:")]),t._v("\nmutations"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("...")]),a("span",{attrs:{class:"token function"}},[t._v("defaultMutations")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("pattern"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'traditional'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// or 'simple'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"hook-for-firestore-sync"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hook-for-firestore-sync","aria-hidden":"true"}},[this._v("#")]),this._v(" Hook for Firestore sync")])}],!1,null,null,null);e.options.__file="hooks.md";s.default=e.exports}}]);