import test from 'ava'
import store from './helpers/index.cjs.js'

// test('setters', t => {
//   const modulePath = 'locationJournal/gymData/'
//   const prop = 'defeated.palletTown'
//   const a = store.get(modulePath + prop)
//   store.set(modulePath + prop, 1)
//   const b = store.get(modulePath + prop)
//   t.is(b, 1)
//   store.dispatch(modulePath + 'set/defeated.palletTown', 2)
//   const c = store.get(modulePath + prop)
//   t.is(c, 2)
//   store.commit(modulePath + prop, 3)
//   const d = store.get(modulePath + prop)
//   t.is(d, 3)
//   t.is(store.state.locationJournal.gymData.defeated.palletTown, 3)
// })

// test('arraySetters', t => {
//   const modulePath = ''
//   const prop = 'pokemonBox.waterPokemon'
//   const array = store.state.pokemonBox.waterPokemon
//   // MUTATIONS
//   // push
//   const pushVal = store.commit(modulePath + prop + '.push', 'charmander')
//   t.is(array.length, 2)
//   t.is(array[1], 'charmander')
//   // pop
//   const popVal = store.commit(modulePath + prop + '.pop')
//   t.is(array.length, 1)
//   // shift
//   const shiftVal = store.commit(modulePath + prop + '.shift')
//   t.is(array.length, 0)
//   // splice
//   store.commit(modulePath + prop + '.push', 'warturtle')
//   const spliceVal = store.commit(modulePath + prop + '.splice', [0, 0, 'blastoise'])
//   t.is(array.length, 2)
//   t.is(array[0], 'blastoise')
//   // ACTIONS
//   // push
//   store.dispatch(modulePath + 'set/' + prop + '.push', 'psyduck')
//   const _pushVal = store.dispatch(modulePath + 'set/' + prop + '.push', 'starmie')
//   t.is(array.length, 4)
//   t.is(array[3], 'starmie')
//   // splice
//   const _spliceVal = store.dispatch(modulePath + 'set/' + prop + '.splice', [1, 1, 'poliwag'])
//   t.is(array.length, 4)
//   t.is(array[1], 'poliwag')
//   // shift and pop
//   const _shiftVal = store.dispatch(modulePath + 'set/' + prop + '.shift')
//   const _popVal = store.dispatch(modulePath + 'set/' + prop + '.pop')
//   t.is(array.length, 2)
// })

// test('object Setters 1 (generated by empty state Object props)', t => {
//   const modulePath = 'dex/'
//   const prop = 'pokemonById'
//   // Add items
//   store.set(modulePath + prop + '.*', {id: '001', name: 'bulbasaur'})
//   store.commit(modulePath + prop + '.*', {id: '004', name: 'charmender'})
//   store.dispatch(modulePath + 'set/' + prop + '.*', {id: '007', name: 'squirtle'})
//   // add some more to test deletions
//   store.set(modulePath + prop + '.*', {id: '002', name: 'ivysaur'})
//   store.set(modulePath + prop + '.*', {id: '003', name: 'venusaur'})
//   store.set(modulePath + prop + '.*', {id: '005', name: 'charmeleon'})
//   store.set(modulePath + prop + '.*', {id: '006', name: 'charizard'})
//   store.set(modulePath + prop + '.*', {id: '008', name: 'warturtle'})
//   store.set(modulePath + prop + '.*', {id: '009', name: 'blastoise'})
//   // check amount
//   let dex = store.state.dex.pokemonById

//   // make deletions
//   // store.delete(modulePath + prop, '002') // now ONLY * syntax allowed
//   // t.falsy(dex['002'])
//   store.delete(modulePath + prop + '.*', '003')
//   t.falsy(dex['003'])
//   // store.commit(modulePath + '-' + prop, '005') // now ONLY * syntax allowed
//   // t.falsy(dex['005'])
//   store.commit(modulePath + '-' + prop + '.*', '006')
//   t.falsy(dex['006'])
//   // store.dispatch(modulePath + 'delete/' + prop, '008') // now ONLY * syntax allowed
//   // t.falsy(dex['008'])
//   store.dispatch(modulePath + 'delete/' + prop + '.*', '009')
//   t.falsy(dex['009'])
//   dex = store.state.dex.pokemonById

//   // check if additions are still there
//   t.is(dex['001'].name, 'bulbasaur')
//   t.truthy(dex['001'])
//   t.is(dex['004'].name, 'charmender')
//   t.truthy(dex['004'])
//   t.is(dex['007'].name, 'squirtle')
//   t.truthy(dex['007'])
// })

// test('object Setters 2 (generated by empty state Object props)', t => {
//   const modulePath = 'locationJournal/'
//   const prop = 'visitedPlaces'
//   const _celurean = {id: 'celurean city', visited: true, gym: true}
//   const _1 = {id: '1', visited: false, gym: true}
//   const _2 = {id: '2', visited: true, gym: false}
//   const _3 = {id: '3', visited: false, gym: false}
//   const _4 = {id: '4', gym: true}
//   const _5 = {id: '5', visited: true}
//   const _6 = {id: '6'}
//   const _7 = {id: '7', visited: true, gym: true}
//   const _8 = {id: '8', visited: true, gym: true}
//   const _9 = {id: '9', visited: true, gym: true}
//   const _10 = {id: '10', visited: true, gym: true}
//   const _11 = {id: '11', visited: true, gym: true}
//   let places = store.state.locationJournal.visitedPlaces
//   const initialLength = Object.keys(places).length
//   t.is(Object.keys(places).length, 0 + initialLength)

//   // add
//   store.commit(modulePath + prop + '.*', _celurean)
//   store.dispatch(modulePath + 'set/' + prop + '.*', _4)
//   store.set(modulePath + prop + '.*', _6)
//   t.is(Object.keys(places).length, 3 + initialLength)
//   t.truthy(places[_celurean.id])
//   t.truthy(places[_4.id])
//   t.truthy(places[_6.id])
//   t.is(places[_celurean.id].visited, true)
//   t.is(places[_celurean.id].gym, true)
//   t.is(places[_4.id].visited, false)
//   t.is(places[_4.id].gym, true)
//   t.is(places[_6.id].visited, false)
//   t.is(places[_6.id].gym, false)

//   // set sub props
//   store.set(modulePath + prop + '.*', _1)
//   t.is(Object.keys(places).length, 4 + initialLength)
//   // sub props: commit
//   t.is(places[_1.id].visited, false)
//   t.is(places[_1.id].gym, true)
//   store.commit(modulePath + prop + '.*', {id: _1.id, visited: 'booyah!'})
//   store.commit(modulePath + prop + '.*.gym', [_1.id, 'booyah!'])
//   t.is(places[_1.id].visited, 'booyah!')
//   t.is(places[_1.id].gym, 'booyah!')
//   // sub props: dispatch
//   t.is(places[_4.id].visited, false)
//   t.is(places[_4.id].gym, true)
//   store.dispatch(modulePath + 'set/' + prop + '.*', {id: _4.id, visited: 'booyah!'})
//   store.dispatch(modulePath + 'set/' + prop + '.*.gym', [_4.id, 'booyah!'])
//   t.is(places[_4.id].visited, 'booyah!')
//   t.is(places[_4.id].gym, 'booyah!')
//   // sub props: set
//   store.set(modulePath + prop + '.*', {id: _6.id, visited: 'booyah!'})
//   store.set(modulePath + prop + '.*.gym', [_6.id, 'booyah!'])
//   t.is(places[_6.id].visited, 'booyah!')
//   t.is(places[_6.id].gym, 'booyah!')

//   // Set props not part of the item
//   // store.commit(modulePath + prop + '.*.new', {id: _1.id, val: 'new prop'})
//   // store.dispatch(modulePath + 'set/' + prop + '.*.new', {id: _4.id, val: 'new prop'})
//   // store.set(modulePath + prop + '.*.new', {id: _6.id, val: 'new prop'})
//   // t.is(places[_1.id].new, 'new prop')
//   // t.is(places[_4.id].new, 'new prop')
//   // t.is(places[_6.id].new, 'new prop')

//   // sub props: with spaces in id
//   store.commit(modulePath + prop + '.*', {id: _celurean.id, visited: 'booyah!'})
//   store.commit(modulePath + prop + '.*.gym', [_celurean.id, 'booyah!'])
//   t.is(places[_celurean.id].visited, 'booyah!')
//   t.is(places[_celurean.id].gym, 'booyah!')

//   // delete
//   store.delete(modulePath + prop + '.*', _celurean.id)
//   store.commit(modulePath + '-' + prop + '.*', _6.id)
//   store.dispatch(modulePath + 'delete/' + prop + '.*', _1.id)
//   t.is(Object.keys(places).length, 1 + initialLength)

// })

test('double id setters', t => {
  const _027 = {id: '027', name: 'Sandshrew'}
  const _043 = {id: '043', name: 'Oddish'}
  const _077 = {id: '_077_', name: 'Ponyta'}
  store.set('dexDB/pokemonById.*', _027)
  store.set('dexDB/pokemonById.*', {[_043.id]: _043})
  store.set('dexDB/pokemonById.*', _077)
  let dex = store.state.dexDB.pokemonById
  t.is(dex[_027.id].name, 'Sandshrew')
  t.is(dex[_043.id].name, 'Oddish')
  t.is(dex[_077.id].name, 'Ponyta')
  store.set('dexDB/pokemonById.*.tags.*', [_027.id, {'ground': true}])
  store.set('dexDB/pokemonById.*.tags.*', [_043.id, {'grass': true}])
  store.set('dexDB/pokemonById.*.tags.*', [_077.id, {'fire': true}])
  // store.set(`dexDB/pokemonById._007_.tags.*`, {fire: true})
  const id = 'dark'
  store.set('dexDB/pokemonById.*.tags.*', [_027.id, {[id]: true}])
  store.set('dexDB/pokemonById.*.tags.*', [_043.id, {[id]: true}])
  store.set('dexDB/pokemonById.*.tags.*', [_077.id, {[id]: true}])
  t.truthy(dex[_027.id].tags['dark'])
  t.truthy(dex[_043.id].tags['dark'])
  t.truthy(dex[_077.id].tags['dark'])
  t.is(dex[_027.id].tags['dark'], true)
  t.is(dex[_043.id].tags['dark'], true)
  t.is(dex[_077.id].tags['dark'], true)
  // deletes
  // store.delete('dexDB/pokemonById.*.tags.*', [_027.id, 'dark'])
  // store.dispatch('dexDB/delete/pokemonById.*.tags.*', [_043.id, 'dark'])
  // store.commit('dexDB/-pokemonById.*.tags.*', [_077.id, 'dark'])
  t.is(dex[_027.id].name, 'Sandshrew')
  t.is(dex[_043.id].name, 'Oddish')
  t.is(dex[_077.id].name, 'Ponyta')
  t.truthy(dex[_027.id].tags['ground'])
  t.truthy(dex[_043.id].tags['grass'])
  t.truthy(dex[_077.id].tags['fire'])
  t.is(dex[_027.id].tags['ground'], true)
  t.is(dex[_043.id].tags['grass'], true)
  t.is(dex[_077.id].tags['fire'], true)
  // t.falsy(dex[_027.id].tags['dark'])
  // t.falsy(dex[_043.id].tags['dark'])
  // t.falsy(dex[_077.id].tags['dark'])
})
